import{o as n,c as s,a}from"./app.6ae31f14.js";const t='{"title":"","description":"","frontmatter":{},"relativePath":"javascript/new.md","lastUpdated":1622120550566}',p={},o=a('<p>new 的原理是什么？通过 new 的方式创建对象和通过字面量的方式创建对象有什么区别？ 在调用<code>new</code>的过程中会发生以下几件事：</p><ol><li>在内存中创建一个新对象</li><li>这个新对象内部的[[Prototype]]特性被复制为构造函数的 prototype 属性</li><li>构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）</li><li>执行构造函数内部的代码（给新对象添加属性）</li><li>如果构造函数返回非空对象，则返回该对象；否则，返回创建的新对象</li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">MyNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个新变量</span>\n  <span class="token keyword">const</span> Con <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取构造函数</span>\n  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Con</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// 设置新对象的原型</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">Con</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造函数内部的this赋值为这个新对象并执行构造函数</span>\n  <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>对于对象来说，其实都是通过 new 产生的，无论是<code>function Foo()</code> 还是<code>let a = {b:1}</code>。 对于创建一个对象来说，更推荐使用字面量的方式创建对象（无论是性能上还是可读性上来讲）。因为使用<code>new Object()</code>创建对象需要通过原型链一层层找到<code>Object</code>，但是使用字面量的方式来创建就没有这个问题。</p><div class="language-js"><pre><code><span class="token comment">// function 是个语法糖</span>\n<span class="token comment">// 内部等同于 new Function()</span>\n<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 这个字面量内部也使用了new Object()</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>b<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>\n</code></pre></div>',5);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
