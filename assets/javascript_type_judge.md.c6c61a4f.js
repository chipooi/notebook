import{o as n,c as s,a}from"./app.6ae31f14.js";const t='{"title":"typeof","description":"","frontmatter":{},"headers":[{"level":2,"title":"typeof","slug":"typeof"},{"level":2,"title":"instanceof","slug":"instanceof"},{"level":3,"title":"手写 instanceof","slug":"手写-instanceof"},{"level":2,"title":"Object.prototype.toString","slug":"object-prototype-tostring"}],"relativePath":"javascript/type_judge.md","lastUpdated":1622118697595}',p={},o=a('<h2 id="typeof"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h2><p>对于基本类型来说，除了 <code>null</code> 都可以正确地判断类型；对于对象类型来说，除了 <code>function</code> 以外的类型都会返回<code>&quot;object&quot;</code></p><div class="language-js"><pre><code><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// &#39;number&#39;</span>\n<span class="token keyword">typeof</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;string&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// &#39;undefined&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// &#39;null&#39;</span>\n<span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// &#39;boolean&#39;</span>\n<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;symbol&#39;</span>\n<span class="token keyword">typeof</span> <span class="token number">1n</span><span class="token punctuation">;</span> <span class="token comment">// &#39;bigint&#39;</span>\n\n<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> console<span class="token punctuation">.</span>log<span class="token punctuation">;</span> <span class="token comment">// &#39;function&#39;</span>\n</code></pre></div><h2 id="instanceof"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h2><p><code>typeof</code> 没有正确判断所有对象类型，要判断对象类型我们可以使用<code>instanceof</code>，因为 <code>instanceof</code> 内部机制是通过判断对象的原型中是不是能找到类型的<code>prototype</code>。</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\np1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span> <span class="token comment">// true</span>\n\n<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>\nstr <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment">// false</span>\n\n<span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">)</span>\nstr1 <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment">// true</span>\n\n<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// true</span>\n</code></pre></div><p>对于原始数据来说，我们没有办法直接通过 instanceof 进行判断，但是我们可以通过 hack 的方式来让 instanceof 支持基础类型的判断。 我们可以通过<code>[Symbol.hasInstance]</code>来自定义 instanceof 的行为。</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">PrimitiveString</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\nstr <span class="token keyword">instanceof</span> <span class="token class-name">PrimitiveString</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="手写-instanceof"><a class="header-anchor" href="#手写-instanceof" aria-hidden="true">#</a> 手写 instanceof</h3><p>instanceof 的实现步骤：</p><ul><li>获取类型的原型</li><li>获取对象的原型</li><li>循环判断对象的原型是否等于类型的原型，直到对象的原型为<code>null</code>，因为原型链最终为<code>null</code></li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> target <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n    origin <span class="token operator">===</span> <span class="token keyword">null</span>\n  <span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> origin<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    target <span class="token operator">=</span> target<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="object-prototype-tostring"><a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a> Object.prototype.toString</h2><p>每一个继承 Object 的对象都有 toString 方法，如果 toString 方法没有重写的话，会返回[Object type]，其中 type 为对象的类型。但除了 Object 类型的对象外，其他类型直接使用 toString 方法时，会直接返回内容的字符串，所以我们需要使用 call 或者 apply 方法来改变 toString 的执行上下文。==这种方法对于所有的基本类型也能够正确的判断，即使是 undefined 和 null==</p><div class="language-js"><pre><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Number]&#39;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object String]&#39;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Undefined]&#39;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Null]&#39;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Boolean]&#39;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Symbol]&#39;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object BigInt]&#39;</span>\n\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Array]&#39;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Object]&#39;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Function]&#39;</span>\n</code></pre></div><p>从上面我们可以看到 typeof 和 instanceof 判断类型都并不是一定靠谱。所以我们需要准确判断变量类型的时候可以使用<code>Object.prototype.toString.call(variate)</code></p>',16);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
